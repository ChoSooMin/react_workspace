{"ast":null,"code":"import _initializerDefineProperty from \"/Users/soomin/Desktop/Cloud/Github/react_workspace/08. store/books/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/soomin/Desktop/Cloud/Github/react_workspace/08. store/books/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/soomin/Desktop/Cloud/Github/react_workspace/08. store/books/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _temp;\n\nimport Books from '../Books';\nimport { makeObservable, observable, action } from 'mobx'; // react 객체가 아니라 mobx 객체!!\n\nlet BookStore = (_class = (_temp = class BookStore {\n  // @observable은 관찰 대상이 되는 값\n  constructor() {\n    _initializerDefineProperty(this, \"books\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"book\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"bookSelect\", _descriptor3, this);\n\n    makeObservable(this);\n  } // @computed는 값을 조작해서 정보를 return해주는 역할을 한다.\n\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"books\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return Books;\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"book\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return Books[0];\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"bookSelect\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return book => {\n      this.book = book;\n    };\n  }\n})), _class);\nexport default new BookStore(); // 단순히 export default BookStore를 하면 되는게 아니라 export default new BookStore()를 해야한다. (Singleton 패턴)","map":{"version":3,"sources":["/Users/soomin/Desktop/Cloud/Github/react_workspace/08. store/books/src/store/BookStore.js"],"names":["Books","makeObservable","observable","action","BookStore","constructor","book"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,SAASC,cAAT,EAAyBC,UAAzB,EAAqCC,MAArC,QAAmD,MAAnD,C,CAEA;;IACMC,S,sBAAN,MAAMA,SAAN,CAAgB;AACZ;AAIAC,EAAAA,WAAW,GAAG;AAAA;;AAAA;;AAAA;;AACVJ,IAAAA,cAAc,CAAC,IAAD,CAAd;AACH,GAPW,CAcZ;;;AAdY,C,+EAEXC,U;;;;;WAAmBF,K;;wEACnBE,U;;;;;WAAkBF,KAAK,CAAC,CAAD,C;;8EAMvBG,M;;;;;WACaG,IAAD,IAAU;AACnB,WAAKA,IAAL,GAAYA,IAAZ;AACH,K;;;AAKL,eAAe,IAAIF,SAAJ,EAAf,C,CAAgC","sourcesContent":["import Books from '../Books';\nimport { makeObservable, observable, action } from 'mobx';\n\n// react 객체가 아니라 mobx 객체!!\nclass BookStore {\n    // @observable은 관찰 대상이 되는 값\n    @observable books = Books;\n    @observable book = Books[0];\n\n    constructor() {\n        makeObservable(this);\n    }\n\n    @action // 이벤트가 발생해서 변경해야 할 부분(데이터를 변경시킬 부분)이 있을 경우  = 데이터들을 변경시킬 메소드를 작성 (이전에는 this.setState를 사용해 데이터를 바꿔줬다)\n    bookSelect = (book) => {\n        this.book = book;\n    };\n\n    // @computed는 값을 조작해서 정보를 return해주는 역할을 한다.\n}\n\nexport default new BookStore(); // 단순히 export default BookStore를 하면 되는게 아니라 export default new BookStore()를 해야한다. (Singleton 패턴)"]},"metadata":{},"sourceType":"module"}